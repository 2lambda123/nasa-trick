
#SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

include $(dir $(lastword $(MAKEFILE_LIST)))../../../../share/trick/makefiles/Makefile.common

# Replace -isystem with -I so ICG doesn't skip Trick headers
TRICK_SYSTEM_CXXFLAGS := $(subst -isystem,-I,$(TRICK_SYSTEM_CXXFLAGS))

COVERAGE_FLAGS += -fprofile-arcs -ftest-coverage -O0
TRICK_SYSTEM_LDFLAGS  += ${COVERAGE_FLAGS}

# Flags passed to the preprocessor.
TRICK_CPPFLAGS += -I$(GTEST_HOME)/include -I$(TRICK_HOME)/include -g -Wall -Wextra -Wno-sign-compare ${COVERAGE_FLAGS} ${TRICK_SYSTEM_CXXFLAGS} ${TRICK_TEST_FLAGS}
TRICK_LIBS = -L${TRICK_LIB_DIR} -ltrick_mm -ltrick_units -ltrick -ltrick_mm -ltrick_units -ltrick
TRICK_EXEC_LINK_LIBS += -L${GTEST_HOME}/lib64 -L${GTEST_HOME}/lib -lgtest -lgtest_main -lpthread

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = DRAscii_UnitTest

# House-keeping build targets.

all : test

test: $(TESTS)
	./DRAscii_UnitTest --gtest_output=xml:${TRICK_HOME}/trick_test/DRAscii_UnitTest.xml

code-coverage: test
	# Give rid of any old code-coverage HTML we may have.
	rm -rf lcov_html
	# Gather coverage information about the src code.
	lcov --capture \
	--directory ../object_${TRICK_HOST_CPU} \
	--base-directory ../src \
	--output-file src_coverage.info
	# Filter out information about directories that we don't care about.
	lcov --remove src_coverage.info '/Applications/*' '/usr/include/*' \
	--output-file DataRecord_code_coverage.info
	# Generate HTML
	genhtml DataRecord_code_coverage.info \
	--output-directory lcov_html
	# Clean up
	# rm *.info

clean :
	rm -f $(TESTS)
	rm -f *.o
	# Remove gcov/gprof files.
	rm -f *.gcno
	rm -rf io_src xml

TO_ICG = DRAscii.hh \
		DataRecordGroup.hh \
		DataRecordDispatcher.hh

# Builds gtest.a and gtest_main.a.
DRAscii_UnitTest.o : DRAscii_UnitTest.cc
	$(TRICK_CXX) $(TRICK_CPPFLAGS) -c $<
DRAscii_UnitTest : DRAscii_UnitTest.o io_DRAscii.o io_DataRecordGroup.o io_DataRecordDispatcher.o io_SimObject.o io_DR_user_defined_types.o
	$(TRICK_CXX) $(TRICK_SYSTEM_LDFLAGS) -o $@ $^ -L${TRICK_HOME}/lib_${TRICK_HOST_CPU} $(TRICK_LIBS) $(TRICK_EXEC_LINK_LIBS)

io_DR_user_defined_types.o : DR_user_defined_types.hh
	${TRICK_HOME}/bin/trick-ICG -sim_services -o ./io_src $(TRICK_CPPFLAGS) $<
	$(TRICK_CXX) $(TRICK_CPPFLAGS) -c io_src/io_DR_user_defined_types.cpp

io_DRAscii.o : ${TRICK_HOME}/include/trick/DRAscii.hh
	${TRICK_HOME}/bin/trick-ICG -sim_services -o ./io_src $(TRICK_CPPFLAGS) $<
	$(TRICK_CXX) $(TRICK_CPPFLAGS) -c io_src/io_DRAscii.cpp

io_DataRecordGroup.o : ${TRICK_HOME}/include/trick/DataRecordGroup.hh
	${TRICK_HOME}/bin/trick-ICG -sim_services -o ./io_src $(TRICK_CPPFLAGS) $<
	$(TRICK_CXX) $(TRICK_CPPFLAGS) -c io_src/io_DataRecordGroup.cpp

io_DataRecordDispatcher.o : ${TRICK_HOME}/include/trick/DataRecordDispatcher.hh
	${TRICK_HOME}/bin/trick-ICG -sim_services -o ./io_src $(TRICK_CPPFLAGS) $<
	$(TRICK_CXX) $(TRICK_CPPFLAGS) -c io_src/io_DataRecordDispatcher.cpp

io_SimObject.o : ${TRICK_HOME}/include/trick/SimObject.hh
	${TRICK_HOME}/bin/trick-ICG -sim_services -o ./io_src $(TRICK_CPPFLAGS) $<
	$(TRICK_CXX) $(TRICK_CPPFLAGS) -c io_src/io_SimObject.cpp