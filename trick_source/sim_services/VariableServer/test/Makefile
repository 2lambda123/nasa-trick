
#SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

include $(dir $(lastword $(MAKEFILE_LIST)))../../../../share/trick/makefiles/Makefile.common

# Replace -isystem with -I so ICG doesn't skip Trick headers
TRICK_SYSTEM_CXXFLAGS := $(subst -isystem,-I,$(TRICK_SYSTEM_CXXFLAGS))


# Flags passed to the preprocessor.
TRICK_CXXFLAGS += -I$(GTEST_HOME)/include -I$(TRICK_HOME)/include -g -Wall -Wextra -Wno-sign-compare -std=c++11 ${TRICK_SYSTEM_CXXFLAGS}
TRICK_LIBS = -L${TRICK_LIB_DIR} -ltrick_mm -ltrick_units -ltrick -ltrick_mm -ltrick_units -ltrick
TRICK_EXEC_LINK_LIBS += -L${GTEST_HOME}/lib64 -L${GTEST_HOME}/lib -lgtest -lgtest_main -lpthread					  

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = VariableReference_test

# House-keeping build targets.

all : test

test: $(TESTS)
	./VariableReference_test --gtest_output=xml:${TRICK_HOME}/trick_test/VariableReference.xml

code-coverage: test
	# Give rid of any old code-coverage HTML we may have.
	rm -rf lcov_html
	# Gather coverage information about the src code.
	lcov --capture \
	--directory ../object_${TRICK_HOST_CPU} \
	--base-directory ../ \
	--output-file src_coverage.info
	# Filter out information about directories that we don't care about.
	lcov --remove src_coverage.info '/Applications/*' '/usr/include/*' '/Library/*' \
	--output-file VariableServer_code_coverage.info
	# Generate HTML
	genhtml VariableServer_code_coverage.info \
	--output-directory lcov_html
	# Clean up
	# rm *.info
	lcov --list VariableServer_code_coverage.info

clean :
	rm -f $(TESTS)
	rm -f *.o
	# Remove gcov/gprof files.
	rm -f *.gcno *.gcda
	rm -rf io_src xml

# If there's a .hh file that needs to be ICG'd, do this:
io_TestObject.o : TestObject.hh
	${TRICK_HOME}/bin/trick-ICG -sim_services -o ./io_src $(TRICK_CXXFLAGS) $<
	$(TRICK_CXX) $(TRICK_CXXFLAGS) -c io_src/io_TestObject.cpp

VariableReference_test.o : VariableReference_test.cc
	$(TRICK_CXX) $(TRICK_CXXFLAGS) -c $<

VariableReference_test : VariableReference_test.o io_TestObject.o
	$(TRICK_CXX) $(TRICK_SYSTEM_LDFLAGS) -o $@ $^ -L${TRICK_HOME}/lib_${TRICK_HOST_CPU} $(TRICK_LIBS) $(TRICK_EXEC_LINK_LIBS)
