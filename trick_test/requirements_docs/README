#######################################################################################
				README: TRICK 13 REQUIREMENTS DOCUMENT INSTRUCTIONS
				---------------------------------------------------
Author: Lindsay Landry
#######################################################################################

To generate Requirements.html in this directory, type (in the current directory):
	[usr]$ make
**Requirements document is also made after typing "make test" from the top level directory
  Requirements.html will be put into the docs folder under trunk.

To add new unit test xml files to documentation, add the file name to "Test_List.xml"

To add requirements to the tree, make changes to "TopLevelReqs.xml"

These requirements are organized in a hierarchical format (think of a tree), 
with the topmost level requirements at the roots of this "tree" and the lower level
requirements making up the branches. Keep this format in mind when adding, deleting,
or making changes to requirements in the tree.

Each requirement in TopLevelReqs.xml looks as follows:

	 <requirement  
   	   statement="This shall serve as an example requirement."/>

statement:
	This is where the actual requirement verbage goes, verbatim, as you want it to appear
	in the document.

Each requirement in Requirements.html looks as follows:

	3.2.3 Trick shall respond to executive commands sent via the input processor. [3822434711]

[3822434711]:
	This is the tag associated with the requirement statement. This number is used when
	linking one or more unit test with this requirement.

For instructions on how to link unit tests with requirements, go to 
	${TRICK_HOME}/trick_source/trick_utils/reqs/
and look at the README document. As an alternative, you can look at the Integrator unit
test code for examples.
