<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TopLevelReqs PUBLIC "-//Tricklab//DTD Session V1.0//EN" "../DTD/TopLevelReqs.dtd">

<requirement
  statement="[HEADER] Software Description">
  <requirement 
  	statement="[HEADER] Functional Requirements">
	<requirement 
	  statement="[HEADER] Simulation Building">
	  <requirement  
	  	statement="Trick shall provide a utility, the Configuration Processor
		(CP), to build a simulation in accordance with the jobs and data
		structures defined in the simulation definition file."
		verify="Type &quot;CP&quot; in a simulation folder in order to build."/>
	  <requirement 
		statement="CP shall execute the Interface Code Generator (ICG) on all 
		header files required by the simulation.">
		<requirement 
		  statement="ICG shall process C and C++ header files to gather data 
		  structure types."
		  verify=""/>
		<requirement 
		  statement="ICG shall generate source files detailing the layout of 
		  data structures found in each header file."
		  verify="Look for the folder &quot;io_src&quot; in the Trick model folder; 
		  this is generated by ICG."/>
		<requirement 
		  statement="ICG shall generate extensible markup language (XML) auto 
		  documentation detailing the contents of each processed header file."
		  verify=""/>
	  </requirement>
	  <requirement 
		statement="CP shall execute the Module Interface Specification (MIS) 
		utility on all source code files required by the simulation.">
		<requirement 
		  statement="MIS shall process C and C++ source code files to gather 
		  function call prototypes."/>
		<requirement 
		  statement="MIS shall generate the list of object files specified within 
		  the Trick headers in the source files."
		  verify="In the Trick model folder, look for a separate object folder after
		  compiling. This is generated by MIS."/>
		<requirement 
		  statement="MIS shall generate XML auto documentation detailing the 
		  contents of each processed source file."/>
	  </requirement>
	  <requirement 
		statement="CP shall generate a makefile for building the simulation 
		model code.">
		<requirement
		  statement="The makefile shall provide the capability for the user to 
		  override any rule or variable specified."
		  verify="If CP is successful, look in sim folder for &quot;makefile.&quot;
		  This file has read and write permissions."/>
	  </requirement>
	  <requirement 
		statement="CP shall generate source code capable of calling all jobs 
		listed within the simulation definition file."/>
	  <requirement 
		statement="CP shall execute &quot;make&quot; to compile and link a simulation 
		executable."/>
	  <requirement 
		statement="Trick shall support the incorporation of external model 
		libraries."/>
	</requirement>

	<requirement 
	  statement="[HEADER] Executive">
	  <requirement 
		statement="Trick shall support both cyclic and discrete model jobs 
		(job classes).">
		<requirement 
		  statement="Trick shall be capable of discrete job execution scheduling 
		  for each of the following conditions:">
		  <requirement 
			statement="During simulation initialization. (Initialization job class)"/>
		  <requirement 
			statement="Prior to a checkpoint reload. (Pre_Load_Checkpoint job class)"/>
		  <requirement 
			statement="Following a checkpoint reload. (Checkpoint Restart job class)"/>
		  <requirement 
			statement="Prior to checkpoint store. (Checkpoint job class)"/>
		  <requirement 
			statement="Prior to simulation termination. (Shutdown job class)"/>
		  <requirement 
			statement="Upon entering simulation freeze. (Freeze_init job class)"/>
		  <requirement 
			statement="Prior to entering cyclic operation from freeze. (Unfreeze 
			job class)"/>
		</requirement>
		<requirement 
		  statement="Trick shall be capable of periodic job execution scheduling 
		  for each of the following conditions:">
		  <requirement 
			statement="During simulation cyclic operation at a given simulation-
			frequency and simulation-time-offset. (Scheduled job class)"/>
		  <requirement 
			statement="At the top of frame during simulation cyclic (run) mode 
			at a specified frequency, for performing state integration. (Integration 
			job class)"/>
		  <requirement 
			statement="Immediately following the completion of Integration class 
			jobs. (Post_integration job class)"/>
		  <requirement 
			statement="Periodically, at a common frequency during freeze mode. 
			(Freeze job class)"/>
		  <requirement 
			statement="Periodically, at a user specified frequency and offset, 
			in its own process thread of execution with no restriction on whether or
			when it actually completes. (Asynchronous job class)"/>
		  <requirement 
			statement="Periodically, at a user specified frequency and offset 
			in its own process thread of execution with the restriction that the job
			must complete prior to its next scheduled execution. 
			(Asynchronous_must_Finish job class)"/>
		</requirement>
		<requirement 
		  statement="Trick shall be capable of scheduling jobs for execution 
		  for the following (special) conditions:">
		  <requirement 
			statement="Next execution time is the specified period (1 / specified
			freq), plus a random offset within the range of + /â€“  1 period. 
			(Random job class)"/>
		  <requirement 
			statement="Once during initialization mode and thereafter by the 
			Trick mechanism. (Derivative job class)"/>
		  <requirement 
			statement="Once during simulation cyclic (run) mode. Thereafter, the 
			job is responsible for scheduling itself. (Automatic job class)"/>
		  <requirement 
			statement="Once during simulation cyclic (run) mode. Thereafter, the 
			job is responsible for scheduling itself, though the job scheduler
			will ensure that it is always run last amongst jobs scheduled for the
			same time. (Automatic_last job class)"/>
		  <requirement 
			statement="Periodically at the rate of an associated class job, for 
			the purpose implementing dynamic events during state integration.
			(Dynamic_event job class)">
			<requirement 
				statement="The Trick executive shall flag the condition that the 
				value returned by the Dynamic_event class job is less than the 
				associated period."/>
		  </requirement>
		  <requirement 
			statement="For Monte Carlo simulation runs (only):">
			<requirement 
			  statement="Once when the master simulation is initialized. 
			  (Monte_Master_Init job class)"/>
			<requirement 
			  statement="Once before new data is dispatched to a slave. 
			  (Monte_Master_Pre job class)"/>
			<requirement 
			  statement="Once after the result is returned from a slave. 
			  (Monte_Master_Post job class)"/>
			<requirement 
			  statement="Once when the master simulation shuts down. 
			  (Monte_Master_Shutdown job class)"/>
			<requirement 
			  statement="Once when a slave is initialized. (Monte_Slave_Init 
			  job class)"/>
			<requirement 
			  statement="Once after new data is received from master simulation.  
			  (Monte_Slave_Pre job class)"/>
			<requirement 
			  statement="Once after a slave is completed. (sends result to the 
			  master) (Monte_Slave_Post job class)"/>
			<requirement 
			  statement="Once when monte carlo master communication is lost and 
			  a slave shuts down. (Monte_Slave_Shutdown job class)"/>
		  </requirement>
		  <requirement 
			statement="Immediately before or after (user specified) another 
			associated job to check a malfunction trigger. (Malfunction_trigger 
			job class)">
			<requirement 
			  statement="A malfunction_trigger class job shall return TRUE or FALSE."/>
		  </requirement>
		  <requirement 
			statement="Immediately before or after (user specified) an associated 
			job to execute a malfunction. (Malfunction job class)">
			<requirement 
			  statement="A malfunction class job shall only execute if its 
			  malfunction trigger condition is TRUE."/>
		  </requirement>
		</requirement>
	  </requirement>
	  <requirement 
		statement="Trick shall provide a malfunction insertion capability 
		that can override the value of any simulation variable or call a
		malfunction job at any time during the simulation."/>
	  <requirement 
		statement="Trick shall provide a malfunction trigger capability 
		that contains either a condition statement or a job statement that when
		evaluated as TRUE, will cause the malfunction action to occur."/>
	  <requirement 
		statement="Trick shall provide the capability to turn on/off 
		individual jobs."/>
	  <requirement 
		statement="Trick shall provide the capability to turn on/off 
		groups of jobs."/>
	  <requirement	
	  	statement="Trick shall provide the capability to turn on/off
	  	sim objects."/>
	  
	  <requirement 
	    statement="The following requirements need to be and moved to their
	    appropriate places. These requirements are about initiating checkpoints
	    not implementing them. I&apos;ll figure out where they need to go. -- Penn">
	  
		<requirement
		  statement="The Executive Scheduler shall copy all job information 
		  to a checkpointable array before a checkpoint is executed."/>
	    <requirement
	      statement="The Executive Scheduler shall be capable of initiating a checkpoint:">
	      <requirement
	      	statement="before initialization jobs are executed."/>
	      <requirement
	        statement="after initialization jobs are executed."/>
	      <requirement
	        statement="just prior to simulation termination."/>
	      <requirement
	        statement="at a time specified in the input file."/>
	    </requirement>
	    <requirement
	      statement="The simulation control panel shall be capable of initiating a 
	      checkpoint."/>
	  </requirement>
	</requirement>

	<requirement
	  statement="[HEADER] Scheduled Job Queue">
	  <requirement 
	    statement="Trick shall sequence cyclic model jobs in an execution 
	    frame and preserve that order throughout the simulation.">
	    <requirement
	   	  statement="Trick shall schedule a job according to its specification 
	      for job class, phase, cycle time, and offset time in the simulation
	      definition.">
	      <requirement
	        statement="Trick shall order the execution of jobs first according to
	        sim object order."/>
	      <requirement
	      	statement="Trick shall allow the specification to ignore sim object
	      	order and instead order their execution according to job order."/>
	      <requirement
	        statement="When more than one cyclic job has the same execution 
	        time, Trick shall order their execution according to a user settable 
	        job class order."/>
	      <requirement 
	        statement="Trick shall order the execution of jobs within the same 
	        class according to phase, then according to order of specification in
	        the simulation definition."/>
	      <requirement 
	        statement="Trick shall calculate the 1st execution time after 
	        initialization mode for each job (not Random, Automatic) as job cycle
	        time plus optional offset."/>
	    </requirement>
	    <requirement 
	      statement="Trick shall execute all cyclic jobs (except Derivative, 
	      Integration, Dynamic_event, and Post_integration) at the end of
	      initialization mode."/>
	    <requirement 
	      statement="Trick shall execute each cyclic model job when its 
	      next execution time equals simulation time."/>
	    <requirement 
	      statement="Trick shall calculate the subsequent execution time of 
	      each job (not Random, Automatic) as its current execution time plus 
	      the job cycle time."/>
	    <requirement
	      statement="Trick shall schedule the instrumentation base job class before
	      all other jobs."/>
	  </requirement>
	</requirement>

	<requirement 
	  statement="[HEADER] Master/Slave Processing">
	  <requirement
		statement="Trick shall support a &quot;master / slave&quot; distributed 
        processing simulation capability on one or more machines (nodes).">
        <requirement 
          statement="Trick shall provide runtime input processing capabilities 
          (see 3.3.2.1) for each node."/>
        <requirement 
          statement="Trick shall propagate mode commands (see 3.2.2) between 
          master and slave."/>
        <requirement 
          statement="Trick shall provide the capability to data record model 
          variables (see 3.1.2.10) in each node."/>
        <requirement 
          statement="Trick shall provide simultaneous checkpoint/restart 
          capability (see 3.1.2.9) for all nodes."/>
        <requirement 
          statement="Trick shall provide the capability to keep the slave(s) 
          execution in sync with the master&apos;s clock."/>
        <requirement 
          statement="Trick shall provide an import/export capability to 
          facilitate data sharing between master and slave(s)."/>
      </requirement>
	</requirement>

	<requirement
	  statement="[HEADER] Monte Carlo Method">
	  <requirement 
	    statement="Trick shall include a framework capable of performing 
	    Monte Carlo analysis.">
	  	<requirement 
	      statement="The Monte Carlo framework shall use automatically 
	      generated numbers or user supplied numbers."/>
	    <requirement 
	      statement="The Monte Carlo framework shall support optimization 
	      analysis."/>
	    <requirement 
	      statement="The Monte Carlo framework shall be capable of executing
	      across multiple processors and machines."/>
	  </requirement>
	</requirement>

	<requirement
	  statement="[HEADER] Integration">
	  <requirement 
	  	statement="Trick shall provide a built in mechanism to perform 
	  	mathematical integration (anti-differentiation).">
	  	<requirement
	  	  statement="Trick shall provide the following types of integrators: ">
	  	  <requirement
	  	  	statement="Euler"/>
	  	  <requirement
	  	    statement="Euler Cromer"/>
	  	  <requirement
	  	    statement="Nystrom Lear 2"/>
	  	  <requirement
	  	    statement="Modified Midpoint 4"/>
	  	  <requirement
	  	  	statement="Runge Kutta 2"/>
	  	  <requirement
	  	    statement="Runge Kutta 4"/>
	  	  <requirement
	  	    statement="Runge Kutta Gill 4"/>
	  	  <requirement
	  	    statement="Runge Kutta Fehlberg 45"/>
	  	  <requirement
	  	    statement="Runge Kutta Fehlberg 78"/>
	  	  <requirement
	  	    statement="Adams-Bashforth-Moulton (ABM) Method"/>
        </requirement>
        <requirement
      	  statement="Trick shall support the creation and use of user-defined 
      	  integration methods."/>
	  </requirement>
	</requirement>

	<requirement
	  statement="[HEADER] Variable Server">
	  <requirement
	    statement="Trick shall implement a method for interfacing between the
	    simulation and its clients during a simulation run. This is handled by
	    the Variable Server.">
	    <requirement
	      statement="The Variable Server shall obtain data structure information
	      from the sim's source files generated by the ICG."/>
	    <requirement
	      statement="The Variable Server shall provide Python commands to interface
	      between the sim and its clients.">
		  <requirement
			statement="The command var_cycle shall set the frequency, in seconds, 
			of signals sent to the Runtime Input Processor."/>
		  <requirement
			statement="The Variable Server Python commands shall include the following:">
			<requirement
			  statement="var_add"/>
			<requirement
			  statement="var_remove"/>
			<requirement
			  statement="var_units"/>
			<requirement
			  statement="var_exists"/>
			<requirement
			  statement="var_send"/>
			<requirement
			  statement="var_clear"/>
			<requirement
			  statement="var_pause, var_unpause"/>
			<requirement
			  statement="var_exit"/>
		  </requirement>
	    </requirement>
	  </requirement>
	</requirement>

	<requirement
	  statement="[HEADER] Data Recording">
	  <requirement 
	    statement="Trick shall provide a data recording capability during 
	    simulation runs.">
	    <requirement 
	      statement="Data recording operation shall provide the capability 
	      to write to a fixed sized buffer in memory."/>
	    <requirement 
	      statement="Data recording operation shall provide the capability 
	      to write to disk using a separate thread of execution."/>
	    <requirement 
		  statement="Data recording operation shall provide the capability to 
		  write to a ring buffer in memory.">
		  <requirement 
			statement="The ring buffer shall be written to disk at simulation 
			shutdown."/>
		</requirement>
	  </requirement>
	  <requirement 
		statement="Data recording operation shall provide the capability to 
		write directly to disk."/>
	  <requirement 
		statement="Data recording operation shall provide the capability to 
		record one or more variables that a user has specified in a log-group.">
		<requirement 
		  statement="Each log group of model data shall be recorded at its own
		  user specified frequency."/>
		<requirement 
		  statement="Each log group of model data shall have the option to
		  record only when user specified model data changes."/>
		<requirement 
		  statement="Data recording operation shall provide the capability to
		  record multiple log groups of user specified model data."/>
		<requirement 
		  statement="Data recording operation shall record statistics of the 
		  real-time performance of the Trick executive and the model jobs in
		  the simulation."/>
		<requirement 
		  statement="Data recording operation shall time tag the recorded 
		  data with the simulation time."/>
	  </requirement>
	</requirement>

	<requirement 
	  statement="[HEADER] Data Products">
	  <requirement 
		statement="Trick shall provide a capability to generate data-plots of
		logged simulation variable data:">
		<requirement 
		  statement="On the users computer terminal and"
		  verify="On the terminal, type &quot;trick dp &amp;amp;&quot; to use the data products
		  application."/>
		<requirement 
		  statement="as a Postscript file."/>
	  </requirement>
	  <requirement
	  	statement="Data Products shall have the capability of processing the following data
	  	file formats: ">
	  	<requirement
	  	  statement="CSV"/>
	  	<requirement
	  	  statement="Trick Binary"/>
	  	<requirement
	  	  statement="Trick HDF5"/>
	  	<requirement
	  	  statement="Matlab"/>
	  	<requirement
	  	  statement="Matlab-4"/>
	  </requirement>
	  <requirement 
	    statement="Data Products shall have the capability to generate data-plots.">
	  	<requirement
	  	  statement="Data Products shall have the capability to generate two
	  	  dimensional plots."/>
		<requirement 
		  statement="Data Products shall have the capability to generate a 
		  data-plot of any logged variable versus time."/>
	  	<requirement 
		  statement="Data Products shall have the capability to generate a 
		  data-plot of any variable versus any other variable from the same
		  data log file."/>
		<requirement 
		  statement="Data Products shall have the capability to generate a 
		  data-plot of multiple variables, versus a common variable."/>
	  	<requirement 
		  statement="Data Products shall have the capability to generate a 
		  &quot;delta&quot; data-plot for a variable logged in each of two data log
		  files.  A delta data-plot represents the difference between the
		  variable-values of both log files versus time."/>
	  	<requirement 
		  statement="Data Products shall have the capability to generate a 
		  &quot;comparison&quot; data-plot for variables logged in each of multiple data
		  log files." 
		  note="the number of curves = the number Y axis variables
		  times the number of data log files."/>
		<requirement 
		  statement="Data Products shall have the capability to generate a 
		  &quot;comparison&quot; data-plot for different variables not necessarily logged
		  in each of multiple data log files."/>
		<requirement 
		  statement="Data Products shall have the capability to generate a 
		  &quot;contrast&quot; data-plot for variables logged in each of multiple data
		  log files."
		  note="A contrast plot is a comparison and a delta plot on the
		  same page."/> 
	  	<requirement 
		  statement="Data Products shall have the capability to generate 
		  multiple plots per page."/>
	  </requirement>
	  <requirement
	  	statement="Data Products shall have the capability to generate data tables.">
	  	<requirement 
		  statement="Data Products shall provide a capability to generate multi-column 
		  tables of logged simulation variable data."/>
		<requirement 
		  statement="Data Products shall have the capability to generate
		  multiple tables per session."/>
	  </requirement>
	  <requirement 
	    statement="Data Products shall have the capability to generate multiple 
	    pages per session."/>
	  <requirement 
		statement="Data Products shall have the capability to specify the name 
		of the variable to use for the time domain of logged data."/>
	  <requirement 
		statement="Trick shall provide platform-independent drawing routines 
		as a foundation for building portable graphics programs."/>
	  <requirement
	    statement="Trick shall provide the capability to set sim time constraints on
	    plotting and table sessions."/>
	  <requirement
	  	statement="Trick shall provide the capability to change units during a dp session."/>
	  <requirement 
		statement="Trick shall provide a set of default error reporting 
		routines to facilitate error or status reporting by the Trick executive,
		math models, and non-trick applications."/>
	</requirement>

<!-- BEGIN Memory Management -->
  	<requirement
      statement="[HEADER] Memory Management">

	  <!-- -->
      <requirement
        statement= "Trick shall provide a method of cataloging individual memory objects
        within a simulation. A catalog entry consists of the object&apos;s address, its size,
        data type information that describes its contents (declaration), a storage class
        and an optional name."
        note=" &quot;storage class&quot; indicates whether the memory object in question
        was allocated by Trick (TRICK_LOCAL) or whether it was user allocated and handed
        to Trick to cataloged (TRICK_EXTERN).">

        <!-- -->
	    <requirement     
		  statement= "Trick shall provide a means of cataloging a memory object as specified
		  by a C-like data type declaration string. This declaration string will consist of
		  four parts from left to right. 1) One type specifier. 2) Zero or more asterisks 
		  (for pointer specification). 3) Zero or one (variable) names. 4) Zero or more 
		  bracketed integers (for array specification).">

		  <!-- intrinsic types -->
		  <requirement
		    statement= "Type specifiers, within declarations shall include the
		    following primitive, intrinsic data types:">
	 	    <requirement 
	 	   	  statement="CHARACTER"/>
	 	    <requirement 
	 	      statement="UNSIGNED_CHARACTER"/>
	 	    <requirement 
	 	      statement="SHORT"/>
	 	    <requirement 
	 	      statement="UNSIGNED_SHORT"/>
	 	    <requirement 
	 	      statement="INTEGER"/>
	 	    <requirement 
	 	      statement="UNSIGNED_INTEGER"/>
	 	    <requirement 
	 	      statement="LONG"/>
	 	    <requirement 
	 	      statement="UNSIGNED_LONG"/>
	 	    <requirement 
	 	      statement="FLOAT"/>
	 	    <requirement 
	 	      statement="DOUBLE"/>
	 	    <requirement 
	 	      statement="BITFIELD"/>
	 	    <requirement 
	 	      statement="UNSIGNED_BITFIELD"/>
	 	    <requirement 
	 	      statement="LONG_LONG"/>
	 	    <requirement 
	 	      statement="UNSIGNED_LONG_LONG"/>
	 	    <requirement 
	 	      statement="BOOLEAN"/>
	 	    <requirement 
	 	      statement="WCHAR"/>
	 	    <requirement 
	 	      statement="WSTRING"/>
		  </requirement>

		  <!-- user defined types-->
          <requirement
            statement="Type specifiers, within declarations shall include
            user defined type-names."
            note= "These are recorded in the ATTRIBUTES structures generated by
            Trick ICG (Interface Code Generator)."/>
        
		  <!-- arrays -->
          <requirement
            statement= "A bracketed integer, within a declaration shall
            specify a contiguous array of memory elements. The integer will specify the
            number of elements to which that array is constrained."/>

		  <!-- pointers -->
          <requirement
            statement= "An asterisk, within a declaration shall specify a pointer.
            A pointer is a memory object that contains an address of another memory object."/>
        </requirement>
   	  </requirement>

      <!-- allocation -->
      <requirement
        statement= "Trick shall provide a method to allocate and then catalog a memory
        object as specified by a data type declaration. The storage class of variables
        allocated by this method will be designated as &quot;LOCAL&quot;."/>

      <!-- resize arrays -->
      <requirement
        statement= "Trick shall provide a method to resize an existing array variable
        from its current size to a new specified size."/>

      <!-- delete_var -->
      <requirement
  	    statement= "Trick shall provide a method to deallocate a catalogued memory object."/>

      <!-- checkpoint / restore -->
      <requirement
        statement="[HEADER] Checkpoint/Reload" >

	    <!-- write checkpoint -->
        <requirement
          statement= "Trick simulation shall be capable of transforming any or all catalogued
          memory objects into a human readable ASCII representation, called a checkpoint."/>

        <!-- read checkpoint-->
        <requirement
	      statement= "A Trick simulation shall be capable of re-creating, restoring and 
          cataloging all local and named external memory objects represented in a checkpoint. 
          This is called a checkpoint restore."
          note="This does not include anonymous extern variables, which cannot be restored."/>

        <!-- reduced checkpoint -->
        <requirement
          statement= "If Trick&apos;s checkpoint method is configured to 
          &quot;reduced_checkpoint&quot; then zero valued variable will not be 
          stroed in the checkpoint."/>

	    <!-- hexfloat checkpoint -->
        <requirement
          statement= "If Trick&apos;s checkpoint method is configured to 
          &quot;hexfloat_checkpoint&quot; then all floating point values shall 
          be stored in a form that does not lose precision."/>
	  </requirement>
    </requirement>
<!-- END Memory Management -->

    <requirement 
      statement="[HEADER] Utilities">
      <requirement
        statement="[HEADER] Basic Commands">
      	<requirement 
          statement="Trick shall provide a utility (make) to compile 
          all core source code."
          verify="In the top directory of Trick, type &quot;make&quot; or 
          &quot;compile_trick&quot; to build Trick."/>
      	<requirement 
          statement="Trick shall provide a utility (make spotless) 
          to clean all core object code."
          verify="In the top directory of Trick, type &quot;make spotless&quot;
          or &quot;compile_trick spotless&quot; to remove Trick object code."/>
      	<requirement 
          statement="Trick shall provide a utility (gte) for which users can 
          view the values of Trick environment variables."
          verify="After Trick has been configured, type &quot;gte&quot; from anywhere
          for a list of Trick environment variables."/>

<!-- Obsolete or nonexistent utilities
      	<requirement 
          statement="Trick shall provide a utility (catalog) that lists 
          function, data structure, and enumerated type database information 
          for math models that have been processed."/>
      	<requirement 
          statement="Trick shall provide a distributed low level utility 
          (make_build) that generates a UNIX makefile for math model functions
          and header files."
          verify=""/>
      	<requirement 
          statement="Trick shall provide a tool (pickle) that places all user 
          generated files necessary to run/build a simulation into a tar-zipped
          file."
          verify="Usage: perl pickle.pl <SIM_DIR> at directory."/>
        <requirement 
          statement="Trick shall provide a utility (trick_make_checksums) 
          stamp simulation models with a set of checksums."/>
-->

      	<requirement 
          statement="Trick shall provide a tool (sie) to search for the name 
          of a simulation input editor (SIE) database variable."
          verify="After compiling sim, type &quot;sie&quot; to view simulation 
          variables."/>
      	<requirement 
          statement="Trick shall provide a utility (trick_verify_checksums) 
          to compare current checksums with checksums created at release launch."
          note="This function only works on released versions of Trick, not the
          latest developer version."
          verify="In any Trick folder, type &quot;trick_verify_checksums&quot;
          to compare checksums in current and all subfolders."/>
      	<requirement 
          statement="Trick shall provide a built in alias (tdt) which toggles 
          the Trick environment between debug and no debug."
          verify="In any folder type &quot;tdt&quot; to toggle TRICK_CFLAGS"/>
      	<requirement 
          statement="Trick shall provide a clean up utility (kill_sim) that 
          will kill all of a user&apos;s simulations and children."
          verify="While a simulation is running, type &quot;kill_sim&quot; in any window
          to end the run."/>
      </requirement>

      <requirement
        statement="[HEADER] Communications">
        <requirement
          statement="Trick shall provide a custom library for socket communication.">
          <requirement
            statement="[insert TrickComm.xml unit test requirements here]"/>
        </requirement>
      </requirement>

      <requirement
        statement="[HEADER] Interpolation">
        <requirement
          statement="Trick shall provide a custom library for interpolation.">
          <requirement
            statement="Trick shall support one dimensional interpolation."/>
          <requirement
            statement="Trick shall support two dimensional interpolation."/>
        </requirement>
      </requirement>

      <requirement
      	statement="[HEADER] Units">
      	<requirement
      	  statement="Trick shall provide a custom library which will allow 
      	  attachment of units to variables and unit conversion.">
      	  <requirement
      	    statement="Trick shall provide the capability to 
      	    convert both primitive and composite units of like type."/>
      	  <requirement
      	    statement="Trick shall throw an error when attempting to convert units 
      	    of inconsistent types."/>
		  <requirement
		    statement="Trick shall throw an error when improper syntax for declaring 
		    a unit is used."/>
      	</requirement>
	  </requirement>

	  <requirement
	  	statement="[HEADER] Database Queries">
      	<requirement 
          statement="Trick shall provide a means of querying the software 
          version information of the simulation model code."/>
      	<requirement 
          statement="Trick shall provide a utility (trick_version) which will 
          query Trick&apos;s version information."
          verify="Type &quot;trick_version&quot; from the command line for information
          on the current version being used."/>
      </requirement>
    </requirement>
  </requirement>

  <requirement 
	statement="[HEADER] Required States and Modes">
	<requirement 
	  statement="Trick shall support the following simulation modes:">
	  <requirement  
		statement="Initialization (prior to simulation execution),"/>
	  <requirement 
		statement="Freeze (simulation pause prior to or during simulation
		execution),"/>
	  <requirement 
		statement="Load Checkpoint (when a checkpoint file is loaded and 
		parsed by the input processor),"/>
	  <requirement 
		statement="Dump Checkpoint (when a checkpoint file is created),"/>
	  <requirement 
		statement="Step (when simulation execution proceeds one job at a 
		time),"/>
	  <requirement 
		statement="Run (when simulation execution proceeds in its normal 
		cyclical fashion), and"/>
	  <requirement 
		statement="Exit (when simulation execution termination occurs)."/>
	</requirement>
	<requirement 
	  statement="Trick shall provide the following executive commands:">
	  <requirement 
		statement="Initialization Phase Step to step through the 
		Initialization class jobs execution according to user defined job 
		phase order,"/>
	  <requirement 
		statement="Freeze to pause simulation execution,"/>
	  <requirement 
		statement="Run to begin/continue normal cyclic simulation execution,"/>
	  <requirement 
		statement="Step to begin/continue stepping through simulation execution 
		one job at a time,"/>
	  <requirement 
		statement="Load checkpoint to load a checkpoint file and parse it using 
		the input processor,"/>
	  <requirement 
		statement="Dump Checkpoint to create a checkpoint file,"/>
	  <requirement 
		statement="Data Record On to turn on the data recording capability,"/>
	  <requirement 
		statement="Data Record Off to turn off the data recording capability,"/>
	  <requirement 
		statement="Real-time to execute the simulation in real-time,"/>
	  <requirement 
		statement="Non-Real-time to execute the simulation in non-real-time, and"/>
	  <requirement 
		statement="Exit to terminate the simulation execution."/>
	</requirement>
	<requirement 
	  statement="Trick shall respond to executive commands sent via the input
	  processor."/>
	<requirement 
	  statement="Trick shall respond to executive commands sent via 
	  simulation model code."/>
  </requirement>

  <requirement 
	statement="[HEADER] Software Interfaces">
	<requirement 
	  statement="[HEADER] Internal Interfaces">
	  <requirement 
	    statement="Trick shall support parallel processing.">
	    <requirement 
	      statement="Trick shall provide a means of mutual exclusion to 
	      support parallel processing. (depends on)"/>
	  </requirement>
	  <requirement 
	    statement="Trick shall support priority assignment.">
	    <requirement 
	      statement="Trick shall support processor assignment. (Mac OSX does not 
	      support this capability)"/>
	    <requirement 
	      statement="Trick shall support memory locking. (Mac OSX does not 
	      support this capability)"/>
	  </requirement>
	</requirement>

	<requirement 
	  statement="[HEADER] External Interfaces">
	  <requirement 
	  	statement="[HEADER] Runtime Input Processor">
		<requirement 
		  statement="The runtime input processor shall provide the capability 
		  to run repeatable simulation execution scenarios."/>
		<requirement 
		  statement="The runtime input processor shall provide the capability to
		  command and control the simulation modes (see 3.2)."/>
		<requirement 
		  statement="The runtime input processor shall provide the capability to
		  manipulate data for math models."/>
		<requirement 
		  statement="The runtime input processor shall provide the capability to 
		  configure the data recording."/>
		<requirement 
		  statement="The runtime input processor shall provide the capability to 
		  configure checkpointing."/>
		<requirement 
		  statement="The runtime input processor shall provide the capability 
		  to modify model scheduling, real-time control, and distributed
		  processing."/>
	 	<requirement 
		  statement="The runtime input processor shall provide the capability
		  to modify malfunction command and control."/>
		<requirement 
		  statement="The runtime input processor shall provide the capability 
		  to modify model data as a result of data- or time-based events."/>
		<requirement 
		  statement="The runtime input processor shall support the following types:">
		  <requirement
		    statement="double"/>
		  <requirement
		    statement="float"/>
		  <requirement
		    statement="character"/>
		  <requirement
		    statement="unsigned character"/>
		  <requirement
		    statement="short"/>
		  <requirement
		    statement="unsigned short"/>
		  <requirement
		    statement="enum"/>
		  <requirement
		    statement="integer"/>
		  <requirement
		    statement="unsigned integer"/>
		  <requirement
		    statement="long"/>
		  <requirement
		    statement="unsigned long"/>
		  <requirement
		    statement="long long"/>
		  <requirement
		    statement="unsigned long long"/>
		  <requirement
		    statement="boolean"/>
		  <requirement
		    statement="structure"/>
		  <requirement
		    statement="string"/>
		  <requirement
		    statement="bitfield"/>
		  <requirement
		    statement="union"/>
		  <requirement
		    statement="swig integer"/>
		  <requirement
		    statement="swig double"/>
		  <requirement
		    statement="typedef"/>
		  <requirement
		    statement="template"/>
		  <requirement
		    statement="namespace"/>
		  <requirement
		    statement="misc"/>
		  <requirement
		    statement="typedef integer"/>
		  <requirement
		    statement="polymorphism"/>
		</requirement>
		<requirement 
		  statement="The runtime input processor shall provide the capability 
		  to modify job control as following:">
		  <requirement 
			statement="To set job execution cycle time."/>
		  <requirement 
			statement="To set job execution start time."/>
		  <requirement 
			statement="To set job execution stop time."/>
		</requirement>
		<requirement 
		  statement="The runtime input processor shall provide the capability 
		  to modify state integration control and set the integration scheme."/>
		<requirement 
		  statement="The runtime input processor shall provide the capability to
		  create and modify events:">
		  <requirement 
			statement="Events are triggered by an event condition."/>
		  <requirement 
			statement="An action input statement is executed when the event is
			triggered."/>
		</requirement> 
		<requirement 
		  statement="The runtime input processor shall provide the capability 
		  to convert input data to the model data&apos;s measurement unit."/>
	  </requirement>

	  <requirement
	  	statement="[HEADER] Graphical User Interfaces (GUI)">
	  	<requirement 
	      statement="An external interface for which applications can connect
	      to monitor and manipulate variables shall be provided.">
	      <requirement 
	      	statement="A GUI shall be provided to command and control the simulation 
	      	modes (Simulation Control Panel)."/>
	      <requirement 
	      	statement="A GUI shall be provided that has the capability of model 
	      	data monitoring and manipulation (TV)."/>
	      <requirement 
	      	statement="A GUI shall be provided to dynamically plot model data 
	      	during runtime (stripcharting)."/>
	      <requirement 
	      	statement="A GUI shall be provided to modify malfunction command
	      	and control as well as monitor all active and pending malfunctions 
	      	(MTV)."/>
	    </requirement>
	  </requirement>

	  <requirement 
		statement="Trick shall provide a standalone communications package 
		for which an external application may use to connect to a Trick
		simulation."/>
	</requirement>
  </requirement>

  <requirement 
	statement="[HEADER] Performance and Timing Requirements">
    <requirement 
	  statement="Trick shall be capable of synchronizing simulation 
	  time to real-time at specified intervals.">
	  <requirement 
		statement="Real-time control shall be able to use a system clock source."/>
	  <requirement 
		statement="Real-time control shall be able to use an external clock source."/>
	</requirement>
	<requirement 
	  statement="Trick shall be capable of running non-real-time."/>
	<requirement 
	  statement="Trick shall provide the capability to switch between 
	  real-time and non-real-time execution."/>
	<requirement 
	  statement="Trick shall detect when the current simulation job 
	  execution frame takes longer than the real-time frame (overrun).">
  	  <requirement 
		statement="Trick shall by default attempt to catch up to real-time 
		when an overrun occurs."/>
  	  <requirement 
		statement="Trick shall provide the option to respond to simulation 
		overruns by freezing or termination."/>
  	  <requirement 
		statement="The overrun criteria to cause a response shall be either:">
		<requirement 
	  	  statement="A single large overrun of a user specified size (in seconds), or"/>
		<requirement 
	  	  statement="a user specified number of overruns is detected"/>
	  </requirement>
	</requirement>
	<requirement 
	  statement="Trick shall detect when the current simulation job 
	  execution frame is equal to or shorter than the real-time frame 
	  (underrun).">
	  <requirement 
	  	statement="Trick shall by default continuously poll the clock during 
	  	an underrun until the time is a multiple of the real-time frame.">
	  	<requirement
	  	  statement="The Executive Scheduler shall track simulation elapsed time 
	  	  by an integer count of tics/second."/>
	  	<requirement
	  	  statement="The Executive Scheduler shall default to 1,000,000 tics/second"/>
	  	<requirement
	  	  statement="The Executive Scheduler shall provide the capability to list 
	  	  jobs not handled by any scheduler."/>
	  </requirement>
	  <requirement 
	  	statement="Trick shall provide the option to release the processor 
	  	(sleep) during an underrun and re-acquire it using interval timer
	 	signals (itimers)."/>
	  <requirement
	    statement="The Executive Scheduler shall advance simulation time to the 
	    time of the next lowest job call time if the next lowest job call time is 
	    less than the next software frame boundary"/>
	  <requirement
	    statement="The Executive Scheduler shall advance simulation time to the 
	    time of the next software boundary if the next lowest job call time is 
	    greater than or equal to the next software frame boundary."/>
  	</requirement>
  	<requirement 
	  statement="Trick shall support job frequencies of up to 1 ns. Job
	  frequencies will be specified in terms of simulation time, not real
	  (wall clock) time."/>
  </requirement>

  <requirement 
    statement="[HEADER] Internal Data Requirements"/>

  <requirement 
    statement="[HEADER] Adaptation Requirements">
    <requirement 
      statement="Trick source code shall use a POSIX compliant API 
      when accessing POSIX threads (pthreads), mutual exclusions 
      (mutexes), signals,   interrupts, and clock routines."/>
  </requirement>

  <requirement 
    statement="[HEADER] Safety Requirements">
    <requirement
      statement="There are no safety requirement for this software. Any simulations 
      that use trick functions to control hazards are responsible for
      maintaining their safety requirement."/>
  </requirement>

  <requirement 
	statement="[HEADER] Security and Privacy Requirements">
	<requirement
	  statement="There are no security and privacy requirements for this software."/>
  </requirement>

  <requirement 
	statement="[HEADER] Environment Requirements">
	<requirement
	  statement="How about Trick environment and Run-time environment?">
	  <requirement
	  	statement="Trick shall plant a tree for every successful simulation built."/>
	  <requirement
	  	statement="Trick shall be Dolphin Safe."/>
	  <requirement
	  	statement="Trick shall recycle."/>
	</requirement>
  </requirement>
  <requirement 
	statement="[HEADER] Computer Resource Requirements">
	<requirement 
	  statement="[HEADER] Computer Hardware Resource Utilization Requirements">
	  <requirement 
		statement="Trick software requires a host platform to have at 
		a minimum the following:">
		<requirement 
		  statement="50Mb of storage,"/>
		<requirement 
		  statement="128Mb of memory, and"/>
		<requirement 
		  statement="network port when socket communications are used."/>
	  </requirement>
	</requirement>
	<requirement 
	  statement="[HEADER] Computer Software Requirements">
	  <requirement 
		statement="Simulation Building requires that the development 
		platform have the following tools:">
		<requirement 
		  statement="The POSIX API,"/>
		<requirement 
		  statement="a suitable C compiler,"/>
		<requirement 
		  statement="a suitable C++ complier,"/>
		<requirement 
		  statement="perl version 5.6.0 or greater,"/>
		<requirement 
		  statement="make version 3.79 or greater,"/>
		<requirement 
		  statement="flex version 2.5.4 or greater,"/>
		<requirement 
		  statement="bison version 1.875 or greater,"/>
		<requirement 
		  statement="openmotif runtime libraries 2.2.3 or greater, and"/>
		<requirement 
		  statement="openmotif development headers 2.2.3 or greater."/>
	  </requirement>
	  <requirement 
		statement="Simulation Execution requires that the runtime platform to have
		following tools:">
		<requirement 
		  statement="Tcl/tk version 8.4 or greater when Trick&apos;s graphical user 
		  interfaces are required to run."/>
	  </requirement>
	</requirement>
	<requirement 
	  statement="[HEADER] Computer Communications Requirements"/>
  </requirement>
  <requirement 
	statement="[HEADER] Design and Implementation Constraints">
	<requirement
	  statement="Trick shall not preclude that which cannot be precluded unless 
	  Trick is precluded from not precluding the unprecludable."/>
  </requirement>
  <requirement 
	statement="[HEADER] Personnel-Related Requirements">
	<requirement
	  statement="There are no personnel-related requirements."/>
  </requirement>
  <requirement 
	statement="[HEADER] Training-Related Requirements">
	<requirement
	  statement="There are no training-related requirements."/>
  </requirement>
  <requirement 
	statement="[HEADER] Logistics-Related Requirements">
	<requirement
	  statement="There are no logistics-related requirements."/>
  </requirement>
  <requirement 
	statement="[HEADER] Packaging Requirements">
	<requirement
	  statement="There are no packaging requirements."/>
  </requirement>
  <requirement 
	statement="[HEADER] Precedence and Criticality of Requirements">
	<requirement 
	  statement="[HEADER] Qualification Provisions"/>
	<requirement 
	  statement="[HEADER]Requirements Traceability and Verification Data"/>
	<requirement 
	  statement="[HEADER] Requirements Partitioning for Phased Delivery">
	  <requirement
	    statement="Trick software releases shall be delivered in complete packages."/>
	</requirement>
	<requirement 
	  statement="[HEADER] Testing Requirements that Drive Software Design Decisions"/>
  </requirement>
</requirement>

