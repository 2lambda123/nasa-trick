Verification Procedure #2

PURPOSE: This test verifies the non-Monte Carlo and non-Malfunction
         job class requirements specified in section 3.1.2.1 of the
         Trick requirements document.

TEST PREREQUISITES:
       need ability to chown the sim exe to root and set the s bit. 
       need a machine with a minimum of 2 CPUs.

REQUIREMENTS:
3.1.2.1.1
*3.1.2.1.1.1 Initialization  job class
*3.1.2.1.1.2 Pre_Load_Checkpoint job class
*3.1.2.1.1.3 Checkpoint restart job class
*3.1.2.1.1.4 Checkpoint job class
*3.1.2.1.1.5 Shutdown job class
*3.1.2.1.1.6 Freeze Init job class
*3.1.2.1.1.7 Unfreeze job class
3.1.2.1.2
*3.1.2.1.2.1 Scheduled job class
*3.1.2.1.2.2 Integration Job class
*3.1.2.1.2.3 Post integration job class
*3.1.2.1.2.4 Freeze job class
*3.1.2.1.2.5 Asynchronous job class
*3.1.2.1.2.6 Asynchronous must finish job class
3.1.2.1.3
*3.1.2.1.3.1 Random job class
*3.1.2.1.3.2 Derivative Job class
*3.1.2.1.3.3 Automatic job class
3.1.2.1.3.4 Automatic last job class
*3.1.2.1.3.5 Dynamic event job class
3.1.2.1.3.5.1 
*3.1.2.3     Numeric integration


These need to go into a different test.
3.1.2.14    parallel processing
3.1.2.14.1  thread support
3.1.2.14.2  depends on
3.1.2.15    priority assignment
3.1.2.16    processor assignment ( Linux only )
3.1.2.17    memory locking (Linux only)


PROCEDURE:

1) Run CP.

    Expected result(s): CP completes successfully. You should see:

    === Simulation make complete ===

2)
chown root S_main_{$TRICK_HOST_CPU}.exe
chown +s S_main_{$TRICK_HOST_CPU}.exe

3) Type the following and press RETURN: 
   S_main_{$TRICK_HOST_CPU}.exe RUN_A/input

    Expected result(s):
            a) the sim_control panel appears,
            b) the sim is in Freeze mode
            c) Run Elapsed Time (RET) is equal to 0.00.

    Notice: If this test is being run on  Mac OSX the following messages will appear:
            Warning: Trick on Darwin does not yet support memory locking.
            Warning: Trick on Darwin does not yet support processor assignment.

4) Run the simulation for a few seconds by pressing the Start button
 on the sim_control panel, waiting about three seconds and then pressing the Freeze button.

    Expected result(s):
            a) the sim is again in freeze mode and
            b) RET is non-zero.
            c) sched_freeze(), a freeze class job, runs periodically during and only during FREEZE mode ()
               [Req-3.1.2.1.2.4].

5) Record the value in the RET field.  : __________

6) On the sim control panel Press the "Dump Chkpnt" button.
   Expected result(s):
            A file dialog appears.

7) Record the name of checkpoint file. : __________

8) On the dialog, press the Save button.
   Expected result(s):
            a) The file dialog disappears.
            b) The Status Messages window indicates that sched_checkpoint() ran once
               at the time recorded in step 5.
            c) The Status Messages window :Checkpoint file dump complete.

9) Run the simulation for a few more seconds by pressing the Start button
on the sim_control panel, waiting several seconds and then pressing the Freeze button.

   Expected result(s):
            a) the sim is again in freeze mode and
            b) RET is greater than that recorded in step 5.

10) Record the value in the RET field. :  __________

11) On the sim control panel Press the "Load Chkpnt" button.

   Expected result(s):
          A file dialog appears.

12) In the "File name" field of the file dialog, enter the name of the
checkpoint file recorded in step 7 and press the Open button.

   Expected result(s):
          the value in the RET field returns to the value recorded in step 4.

13) Press Start and let the simulation run to completion.
   Expected result(s):
          The simulation runs to completion.

          DIAGNOSTIC:
          Simulation reached input termination time.

14) Save the status messages: File->Save Status Msgs... and record the filename: __________.

15) Press Exit on the Sim Control Panel.

16) Open the status messages file that was saved in step 14, using your favorite text editor.
    It's in the RUN_test directory.

17) [] Verify that 3 child threads have been created (child 2, 3 and 4).

18) [] Verify that sched_init() {an Initialization job} ran once at sim time 0.0000 [Req-3.1.2.1.1.1].

19) [] Verify that sched_freeze_init(), a freeze_init class job, ran once,
       just prior to each transition into FREEZE mode (indicated by the
       message "Freeze ON").[Req-3.1.2.1.1.6].

20) [] Verify that sched_freeze(), a freeze class job, ran periodically
       during and only during FREEZE mode (between "Freeze ON" and "Freeze OFF"
        messages.)  [Req-3.1.2.1.2.4].

21) [] Verify that sched_unfreeze(), an unfreeze class job, ran once, just prior
       to each transition from FREEZE mode (Indicated by the message "Freeze OFF") [Req-3.1.2.1.1.7]

22) [] Verify that sched_checkpoint() ran once, just prior to the checkpoint dump
    (Indicated by the message "Checkpoint file dump complete"). [Req-3.1.2.1.1.4]

23) [] Verify that sched_pre_load() ran once, just prior to the checkpoint reload
       ( Indicated by the message "Checkpoint file load complete" ) [Req-3.1.2.1.1.2]

24) [] Verify that sched_restart() ran once, just after the checkpoint reload
       ( Indicated by the message "Checkpoint file load complete" ) [Req-3.1.2.1.1.3]

25) [] Verify that sched_scheduled(), a scheduled class job, ran once every 0.1
       seconds (as specified in the S_define file). [Req-3.1.2.1.2.1] 

26) [] Verify that sched_random() runs at time 0.0, 0.0+ some random amount, 1.0 plus or
       minus some random amount, 2.0 plus or minus some random amount, and so forth.

27) [] Verify that sched_deriv() {a Derivative job} ran once at sim time 0.0000 and
       thereafter four times per integration period. [Req-3.1.2.1.3.2].

Note: The S_define for this test specifies that the integration period is 0.01 seconds.
Note: The derivative job sched_deriv() is called four times per integration period 
      because the sim associated with this test uses the default Runge Kutta 4 integration algorithm. 

28) [] Verify that sched_integ(), an Integration job, ran four times per integration
       period, following sched_deriv(). sched_integ() did not run at sim time = 0.0000 [Req-3.1.2.1.2.2].

29) [] Verify that sched_post_integ(), a post_integration class job, ran once
       per integration period, following the sched_deriv() and sched_integ()
       job calls during that period. [Req-3.1.2.1.2.3]

NOTE: The scheduler does not wait for ASYNCHRONUS class jobs to complete. When 
    an ASYNCHRONUS job does complete, it is rescheduled at the next multiple of
    its specified scheduling period. The function sched_async(), an asynchronous
    job, has a scheduling period of 0.7. When sched_async() is first called, it
    simply sleeps for 0 seconds. The next time it sleeps for 1 sec, then 2 secs
    and so forth.  So sched_async() should be first scheduled at 0.0 seconds, will
    run for ~0 secs, be rescheduled at 0.7 secs, sleep for 1 sec, be scheduled at
    2.1 secs, sleep for 2 secs, be scheduled at 4.2 secs, and so forth. It will
    then be scheduled at the next multiple of 0.7 seconds, that is 0.7 seconds.
    sched_async will sleep for 1.0 second (). 

30)  []  Verify that sched_async() ran at 0.0 seconds, 0.7 seconds, 2.1 seconds,
      4.2 seconds, etc [Req-3.1.2.1.2.5]

NOTE: The function sched_automatic(), an automatic class job, reshedules itself 1.1 seconds
      in the future.

31) [] Verify that sched_automatic() runs at 0.0000 seconds and thereafter at multiples of
    1.1000 seconds. [Req-3.1.2.1.3.3]
    
Add Test for AUTOMATIC_LAST job class. [Req-3.1.2.1.3.4]

Add test for Random job class [Req-3.1.2.1.3.1]

NOTE: In order to verify that Trick numeric integration and Trick dynamic events work correctly,
      the test2 simulation compares numeric and analytic solutions for a
      spring-mass-damper model. The analytic solution represents the "truth" values against which
      we can compare Trick's numeric integration.

      In the test2 simulation, sched_dyn_event() , a dynamic event class job is coded to trigger
      a dynamic event when the variable parent.sched.msd.numeric.pos passes through zero. 

32) [] Verify that the Dynamic event {sched_dyn_event()} fired at 0.515, 1.505,
    2.505, 3.495, 4.495 (+/- 0.005 seconds) . [Req-3.1.2.1.3.5]

33) Close the status messages file that was opened in step ##.

NOTE:
 The variable parent.sched.msd.analytic.pos represents the value that the position "should" be.
 The variable parent.sched.msd.numeric.pos represents the position estimated using Trick's numeric
 integration capabilities. The difference between these ( parent.sched.msd.delta_pos ) should be small. 
 [Req-3.1.2.3]

34) [] Using trick_dp, verify that parent.sched.msd.delta_pos is not more than about 1e-06 meters (m).

NOTE:
The variable parent.sched.msd.delta_vel is the difference between the analytic and numeric velocity values.

35) [] Verify that parent.sched.msd.delta_vel (velocity) is not more than about 1e-06 meters (m/s).

36) Close the status messages file opened in step 16.


The function sched_amf() is written to alternately run for 1.5 and then 0.5 seconds.
In the S_define, it is scheduled at 1.0 seconds. 

37) Again run the sim but this time using RUN_B/input.
    Type the following and press RETURN: 

    S_main_{$TRICK_HOST_CPU}.exe RUN_B/input

    Expected result(s):
            a) the sim_control panel appears,
            b) the sim is in Freeze mode
            c) Run Elapsed Time (RET) is equal to 0.00.

37) Press Start and let the simulation run to completion.
   Expected result(s):
          The simulation runs to completion.

          DIAGNOSTIC:
          Simulation reached input termination time.

38) WHAT IS THE EXPECTED BEHAVIOR OF ASYNCHRONOUS MUST FINISH, THESE DAYS.?



END OF TEST.

