sim_object { /* TRICK EXECUTIVE ---------------------------------------------*/

     sim_services/include/: EXECUTIVE exec  (sim_services/include/executive.d) ;

  (automatic) sim_services/input_processor:
     input_processor( Inout INPUT_PROCESSOR * IP = &sys.exec.ip ) ;

} sys ; /*-------------------------------------------------------------------*/


sim_object { /* Scheduled ---------------------------------------------------*/

    sim_services/include:  INTEGRATOR  integ (test2/include/sched_integ.d) ;
    test2: SCHEDULE    sched  (test2/include/sched.d);


    /* see Trick Requirement 3.1.2.1.1.1 */
    (initialization)      test2: sched_init(
                                 Inout SCHEDULE *S    = &parent.sched ) ;

    /* see Trick Requirement(s) 3.1.2.1.2.2, 3.1.2.3 */
    (integration)         test2: sched_integ(
                                 Inout INTEGRATOR  *I  = &parent.integ ,
                                 Inout MSD_NUMERIC *N  = &parent.sched.msd.numeric ) ;

    /* see Trick Requirement 3.1.2.1.2.3 */
    (post_integration)    test2: sched_post_integ(
                                 Inout SCHEDULE *S     = &parent.sched ) ;

    /* see Trick Requirement 3.1.2.1.3.2 */
    (derivative)          test2: sched_deriv(
                                 Inout MSD_NUMERIC *N  = &parent.sched.msd.numeric,
                                 Inout MSD_PARAMS  *P  = &parent.sched.msd.params ) ;

    /* see Trick Requirement 3.1.2.1.3.5 */
    (dynamic_event)       test2: sched_dyn_event(
                                 Inout MSD_NUMERIC *N  = &parent.sched.msd.numeric,
                                 In    double *time    = &sys.exec.work.integ_time ,
                                 In    int *event_evaluate_tgo = &sys.exec.work.event_evaluate_tgo );

    /* see Trick Requirement 3.1.2.1.2.1 */
    (0.1, scheduled)      test2: sched_scheduled(
                                 Inout MSD_ANALYTIC *A = &parent.sched.msd.analytic,
                                 In    double *time    = &sys.exec.work.integ_time ); 

    /* Calculate the difference between the analytic and numeric pos and vel calculations. */
    (0.1, scheduled)      test2: sched_scheduled_2(
                                 Inout MSD *M = &parent.sched.msd ); 

    /* see Trick Requirement 3.1.2.1.3.1 */
    (1.0, random)         test2: sched_random(
                                 Inout SCHEDULE *S    = &parent.sched ) ;

    /* see Trick Requirement 3.1.2.1.1.2 */
    (pre_load_checkpoint) test2: sched_pre_load(
	                         Inout SCHEDULE *S    = &parent.sched ) ;

    /* see Trick Requirement 3.1.2.1.1.3 */
    (restart)             test2: sched_restart(
       		                 Inout SCHEDULE *S    = &parent.sched ) ;

    /* see Trick Requirement 3.1.2.1.1.4 */
    (checkpoint)          test2: sched_checkpoint(
                                 Inout SCHEDULE *S    = &parent.sched ) ;

    /* see Trick Requirement 3.1.2.1.1.5 */
    (shutdown)            test2: sched_shutdown(
                                 Inout SCHEDULE *S    = &parent.sched ) ;

    /* see Trick Requirement 3.1.2.1.1.6 */
    (freeze_init)         test2: sched_freeze_init(
                                 Inout SCHEDULE *S    = &parent.sched ) ;

    /* see Trick Requirement 3.1.2.1.2.4 */
    (freeze)              test2: sched_freeze(
                                 Inout SCHEDULE *S    = &parent.sched ) ;
	
    /* see Trick Requirement 3.1.2.1.1.7 */
    (unfreeze)            test2: sched_unfreeze(
                                 Inout SCHEDULE *S    = &parent.sched ) ;

    /* see Trick Requirement 3.1.2.1.3.3 */
    (automatic)           test2: sched_automatic(
                                 Inout SCHEDULE *S    = &parent.sched ) ;

    /* see Trick Requirement 3.1.2.1.3.4 */
    (automatic_last)      test2: sched_automatic_last(
                                 Inout SCHEDULE *S    = &parent.sched ) ;

    (0.9, logging)        test2: sched_logging(
                                 Inout SCHEDULE *S    = &parent.sched ) ;

} parent ; /*---------------------------------------------------------------*/

integrate (0.01) parent ;

sim_object { /* Children ---------------------------------------------------*/

    /* see Requirement(s) 3,1,2,14, 3.1.2.14.1 */
C1  (0.9, logging)        test2: sched_logging(
                                 Inout SCHEDULE *S    = &parent.sched ) ;

    /* see Trick Requirement 3.1.2.1.2.6 */
C2  (1.0, asynchronous_mustfinish) test2: sched_amf(
                                   Inout SCHEDULE *S    = &parent.sched ) ;

    /* see Trick Requirement 3.1.2.1.2.5 */
C3  (0.7, asynchronous)   test2: sched_async(
                                 Inout     SCHEDULE *S    = &parent.sched ) ;

} children ; /*---------------------------------------------------------------*/

/* see Trick Requirement 3.1.2.14.2 */
children:  sched_logging()  depends on parent: sched_logging()
// children:  sched_amf()      depends on parent: sched_scheduled()


/* see Trick Requirement 3.1.2.1.2.4 */
freeze (1.0);
